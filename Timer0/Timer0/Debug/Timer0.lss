
Timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000162  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014b  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fc  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000154  00000000  00000000  00000401  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000182  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006d  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000078f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
int counter =0;
ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	counter ++;
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	90 91 61 00 	lds	r25, 0x0061
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25
  98:	80 93 60 00 	sts	0x0060, r24
	if(counter ==8)
  9c:	08 97       	sbiw	r24, 0x08	; 8
  9e:	41 f4       	brne	.+16     	; 0xb0 <__vector_11+0x34>
	{
		PORTB ^=(1<<0);
  a0:	98 b3       	in	r25, 0x18	; 24
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	89 27       	eor	r24, r25
  a6:	88 bb       	out	0x18, r24	; 24
		counter =0;
  a8:	10 92 61 00 	sts	0x0061, r1
  ac:	10 92 60 00 	sts	0x0060, r1
	}
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:

int main(void)
{
	DDRB |= (1<<3);
  be:	bb 9a       	sbi	0x17, 3	; 23
	//OCR0 = 250;
	
	
	// Fast PWM
	
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00) | (1<<CS02);
  c0:	83 b7       	in	r24, 0x33	; 51
  c2:	8d 66       	ori	r24, 0x6D	; 109
  c4:	83 bf       	out	0x33, r24	; 51
	
    while(1)
    {
		 for(int i =0; i<255; i++)
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	20 e0       	ldi	r18, 0x00	; 0
		 {
			 OCR0 = i;
  ce:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	ef ec       	ldi	r30, 0xCF	; 207
  d2:	f7 e0       	ldi	r31, 0x07	; 7
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x16>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x1c>
  da:	00 00       	nop
	
	TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00) | (1<<CS02);
	
    while(1)
    {
		 for(int i =0; i<255; i++)
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	8f 3f       	cpi	r24, 0xFF	; 255
  e0:	91 05       	cpc	r25, r1
  e2:	ac f3       	brlt	.-22     	; 0xce <main+0x10>
  e4:	83 2f       	mov	r24, r19
  e6:	92 2f       	mov	r25, r18
  e8:	f2 cf       	rjmp	.-28     	; 0xce <main+0x10>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
