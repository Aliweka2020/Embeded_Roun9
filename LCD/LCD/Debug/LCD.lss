
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000491  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001f1  00000000  00000000  000006b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000207  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000078  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001b2  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c6  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "LCD_lib.h"

int main(void)
{
	LCD_init();
  6c:	0e 94 56 00 	call	0xac	; 0xac <LCD_init>
	
    while(1)
    {
        SetCursor(0,0);
  70:	60 e0       	ldi	r22, 0x00	; 0
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 83 00 	call	0x106	; 0x106 <SetCursor>
        LCD_Write_char('A');
  7c:	81 e4       	ldi	r24, 0x41	; 65
  7e:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_char>
		LCD_Write_char('l');
  82:	8c e6       	ldi	r24, 0x6C	; 108
  84:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Write_char>
  88:	f3 cf       	rjmp	.-26     	; 0x70 <main+0x4>

0000008a <send_command>:
		{
			case D:
			switch(Control_port)
			{
				case C:
				PORTC &= ~(1<<RS);
  8a:	ae 98       	cbi	0x15, 6	; 21
				PORTD =  cmd;
  8c:	82 bb       	out	0x12, r24	; 18
				PORTC |=(1<<E);
  8e:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	83 ef       	ldi	r24, 0xF3	; 243
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <send_command+0xa>
  98:	00 c0       	rjmp	.+0      	; 0x9a <send_command+0x10>
  9a:	00 00       	nop
				_delay_us(250);
				PORTC &=~(1<<E);
  9c:	af 98       	cbi	0x15, 7	; 21
  9e:	83 ef       	ldi	r24, 0xF3	; 243
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <send_command+0x18>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <send_command+0x1e>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f eb       	ldi	r18, 0xBF	; 191
  ae:	8a ed       	ldi	r24, 0xDA	; 218
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <LCD_init+0x6>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_init+0x10>
  bc:	00 00       	nop
	if(MODE == Eight_bit)
	{
		switch(Data_port)
		{
			case D:
			DDRD =  0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	81 bb       	out	0x11, r24	; 17
			break;
		}
		switch(Control_port)
		{
			case C:
			DDRC |=  (1<<RS) |(1<<E);
  c2:	84 b3       	in	r24, 0x14	; 20
  c4:	80 6c       	ori	r24, 0xC0	; 192
  c6:	84 bb       	out	0x14, r24	; 20
			break;
		}
	}
	send_command(FSet8b2L7);
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 45 00 	call	0x8a	; 0x8a <send_command>
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_init+0x26>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_init+0x2c>
  d8:	00 00       	nop
	_delay_ms(1);
	send_command(ON_OFFCNoB);
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	0e 94 45 00 	call	0x8a	; 0x8a <send_command>
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_init+0x38>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_init+0x3e>
  ea:	00 00       	nop
	_delay_ms(1);
	send_command(Clear);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 45 00 	call	0x8a	; 0x8a <send_command>
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <LCD_init+0x4a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_init+0x50>
  fc:	00 00       	nop
	_delay_ms(2);
	send_command(EntryINCNOSH);
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 45 00 	call	0x8a	; 0x8a <send_command>
 104:	08 95       	ret

00000106 <SetCursor>:
}


void SetCursor(int row, int col)
{
	switch (row)
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	19 f0       	breq	.+6      	; 0x110 <SetCursor+0xa>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	31 f0       	breq	.+12     	; 0x11a <SetCursor+0x14>
 10e:	08 95       	ret
	{
		case 0:
		send_command(0x80 +col);
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	86 0f       	add	r24, r22
 114:	0e 94 45 00 	call	0x8a	; 0x8a <send_command>
		break;
 118:	08 95       	ret
		case 1:
		send_command(0xc0 +col);
 11a:	80 ec       	ldi	r24, 0xC0	; 192
 11c:	86 0f       	add	r24, r22
 11e:	0e 94 45 00 	call	0x8a	; 0x8a <send_command>
 122:	08 95       	ret

00000124 <LCD_Write_char>:
		{
			case D:
			switch(Control_port)
			{
				case C:
				PORTC |= (1<<RS);
 124:	ae 9a       	sbi	0x15, 6	; 21
				PORTD =  x;
 126:	82 bb       	out	0x12, r24	; 18
				PORTC |=(1<<E);
 128:	af 9a       	sbi	0x15, 7	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	83 ef       	ldi	r24, 0xF3	; 243
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Write_char+0xa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_Write_char+0x10>
 134:	00 00       	nop
				_delay_us(250);
				PORTC &=~(1<<E);
 136:	af 98       	cbi	0x15, 7	; 21
 138:	83 ef       	ldi	r24, 0xF3	; 243
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Write_char+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Write_char+0x1e>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
