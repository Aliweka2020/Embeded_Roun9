
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005af  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000294  00000000  00000000  00000861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000310  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  00000e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d4  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000147  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000011b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	//LED led1 = {B,P2};
	//lED_inti(&led1);
	LCD_init();
  92:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_init>
    while(1)
    {
		
		
		
		 send_command(0x01);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
		 SetCursor(0,0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 a0 00 	call	0x140	; 0x140 <SetCursor>
		 LCD_Write_str("Ultrasonic");
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 c0 00 	call	0x180	; 0x180 <LCD_Write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2e>
  c0:	00 00       	nop
  c2:	e9 cf       	rjmp	.-46     	; 0x96 <main+0x4>

000000c4 <send_command>:
				_delay_us(250);
				PORTA &=~(1<<E);
				_delay_us(250);
				break;
				case B:
				PORTB &= ~(1<<RS);
  c4:	c0 98       	cbi	0x18, 0	; 24
				PORTC =  cmd;
  c6:	85 bb       	out	0x15, r24	; 21
				PORTB |=(1<<E);
  c8:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <send_command+0xa>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <send_command+0x10>
  d4:	00 00       	nop
				_delay_us(250);
				PORTB &=~(1<<E);
  d6:	c1 98       	cbi	0x18, 1	; 24
  d8:	83 ef       	ldi	r24, 0xF3	; 243
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <send_command+0x18>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <send_command+0x1e>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f eb       	ldi	r18, 0xBF	; 191
  e8:	8a ed       	ldi	r24, 0xDA	; 218
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <LCD_init+0x6>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_init+0x10>
  f6:	00 00       	nop
		{
			case D:
			DDRD =  0xFF;
			break;
			case C:
			DDRC =  0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 bb       	out	0x14, r24	; 20
			break;
			case A:
			DDRA |=  (1<<RS) |(1<<E);
			break;
			case B:
			DDRB |=  (1<<RS) |(1<<E);
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	87 bb       	out	0x17, r24	; 23
			break;
		}
	}
	send_command(FSet8b2L7);
 102:	88 e3       	ldi	r24, 0x38	; 56
 104:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
 108:	8f ec       	ldi	r24, 0xCF	; 207
 10a:	97 e0       	ldi	r25, 0x07	; 7
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_init+0x26>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_init+0x2c>
 112:	00 00       	nop
	_delay_ms(1);
	send_command(ON_OFFCNoB);
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
 11a:	8f ec       	ldi	r24, 0xCF	; 207
 11c:	97 e0       	ldi	r25, 0x07	; 7
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_init+0x38>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_init+0x3e>
 124:	00 00       	nop
	_delay_ms(1);
	send_command(Clear);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_init+0x4a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_init+0x50>
 136:	00 00       	nop
	_delay_ms(2);
	send_command(EntryINCNOSH);
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
 13e:	08 95       	ret

00000140 <SetCursor>:
}


void SetCursor(int row, int col)
{
	switch (row)
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	19 f0       	breq	.+6      	; 0x14a <SetCursor+0xa>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	31 f0       	breq	.+12     	; 0x154 <SetCursor+0x14>
 148:	08 95       	ret
	{
		case 0:
		send_command(0x80 +col);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	86 0f       	add	r24, r22
 14e:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
		break;
 152:	08 95       	ret
		case 1:
		send_command(0xc0 +col);
 154:	80 ec       	ldi	r24, 0xC0	; 192
 156:	86 0f       	add	r24, r22
 158:	0e 94 62 00 	call	0xc4	; 0xc4 <send_command>
 15c:	08 95       	ret

0000015e <LCD_Write_char>:
				PORTA &=~(1<<E);
				_delay_us(250);
				break;
				
				case B:
				PORTB |= (1<<RS);
 15e:	c0 9a       	sbi	0x18, 0	; 24
				PORTC =  x;
 160:	85 bb       	out	0x15, r24	; 21
				PORTB |=(1<<E);
 162:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	83 ef       	ldi	r24, 0xF3	; 243
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Write_char+0xa>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Write_char+0x10>
 16e:	00 00       	nop
				_delay_us(250);
				PORTB &=~(1<<E);
 170:	c1 98       	cbi	0x18, 1	; 24
 172:	83 ef       	ldi	r24, 0xF3	; 243
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_Write_char+0x18>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_Write_char+0x1e>
 17c:	00 00       	nop
 17e:	08 95       	ret

00000180 <LCD_Write_str>:
		}
		
	}
}
void LCD_Write_str(unsigned char *s)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	ec 01       	movw	r28, r24
	while(*s != '\0')
 186:	88 81       	ld	r24, Y
 188:	88 23       	and	r24, r24
 18a:	31 f0       	breq	.+12     	; 0x198 <LCD_Write_str+0x18>
 18c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_char(*s);
 18e:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Write_char>
		
	}
}
void LCD_Write_str(unsigned char *s)
{
	while(*s != '\0')
 192:	89 91       	ld	r24, Y+
 194:	81 11       	cpse	r24, r1
 196:	fb cf       	rjmp	.-10     	; 0x18e <LCD_Write_str+0xe>
	{
		LCD_Write_char(*s);
		s++;
	}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
