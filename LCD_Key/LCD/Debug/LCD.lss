
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000002a6  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000894  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000404  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000486  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c8  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000296  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 99 00 	call	0x132	; 0x132 <main>
  7a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:
	{'7' ,'8','9','-'},
	{' ' ,'0','=','+'}
} ;
void Keypad_init()
{
	DDRC = 0x0F;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	84 bb       	out	0x14, r24	; 20
	PORTC = 0XFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	85 bb       	out	0x15, r24	; 21
  8a:	08 95       	ret

0000008c <Get_Key_Pressed>:
unsigned char Get_Key_Pressed()
{
	unsigned return_key;
	while (1)
	{
		for(int col=0;col<4;col++)
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTC &= ~(1<<col);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	50 e0       	ldi	r21, 0x00	; 0
unsigned char Get_Key_Pressed()
{
	unsigned return_key;
	while (1)
	{
		for(int col=0;col<4;col++)
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	e0 e0       	ldi	r30, 0x00	; 0
		{
			PORTC &= ~(1<<col);
  98:	65 b3       	in	r22, 0x15	; 21
  9a:	9a 01       	movw	r18, r20
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <Get_Key_Pressed+0x18>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <Get_Key_Pressed+0x14>
  a8:	72 2f       	mov	r23, r18
  aa:	70 95       	com	r23
  ac:	67 23       	and	r22, r23
  ae:	65 bb       	out	0x15, r22	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	a9 ef       	ldi	r26, 0xF9	; 249
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	11 97       	sbiw	r26, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <Get_Key_Pressed+0x28>
  b8:	00 c0       	rjmp	.+0      	; 0xba <Get_Key_Pressed+0x2e>
  ba:	00 00       	nop
			_delay_ms(1);
			for(int row=4;row<8;row++)
			{
				if ( ((PINC & (1<<row)) >> row) == 0 )
  bc:	9c 9b       	sbis	0x13, 4	; 19
  be:	0f c0       	rjmp	.+30     	; 0xde <Get_Key_Pressed+0x52>
  c0:	9d 9b       	sbis	0x13, 5	; 19
  c2:	07 c0       	rjmp	.+14     	; 0xd2 <Get_Key_Pressed+0x46>
  c4:	9e 9b       	sbis	0x13, 6	; 19
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <Get_Key_Pressed+0x4c>
  c8:	9f 99       	sbic	0x13, 7	; 19
  ca:	22 c0       	rjmp	.+68     	; 0x110 <Get_Key_Pressed+0x84>
	{
		for(int col=0;col<4;col++)
		{
			PORTC &= ~(1<<col);
			_delay_ms(1);
			for(int row=4;row<8;row++)
  cc:	e7 e0       	ldi	r30, 0x07	; 7
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	08 c0       	rjmp	.+16     	; 0xe2 <Get_Key_Pressed+0x56>
  d2:	e5 e0       	ldi	r30, 0x05	; 5
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	05 c0       	rjmp	.+10     	; 0xe2 <Get_Key_Pressed+0x56>
  d8:	e6 e0       	ldi	r30, 0x06	; 6
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <Get_Key_Pressed+0x56>
  de:	e4 e0       	ldi	r30, 0x04	; 4
  e0:	f0 e0       	ldi	r31, 0x00	; 0
			{
				if ( ((PINC & (1<<row)) >> row) == 0 )
				{
					return_key = chars[col][row-4];
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	e8 0f       	add	r30, r24
  ec:	f9 1f       	adc	r31, r25
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	e8 5a       	subi	r30, 0xA8	; 168
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
					PORTC |=(1<<col);
  f8:	95 b3       	in	r25, 0x15	; 21
  fa:	29 2b       	or	r18, r25
  fc:	25 bb       	out	0x15, r18	; 21
					PORTB |=(1<<2);
  fe:	c2 9a       	sbi	0x18, 2	; 24
 100:	e3 ed       	ldi	r30, 0xD3	; 211
 102:	f0 e3       	ldi	r31, 0x30	; 48
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <Get_Key_Pressed+0x78>
 108:	00 c0       	rjmp	.+0      	; 0x10a <Get_Key_Pressed+0x7e>
 10a:	00 00       	nop
					_delay_ms(50);
					PORTB &=~(1<<2);
 10c:	c2 98       	cbi	0x18, 2	; 24
 10e:	08 95       	ret
					return return_key;
				}
			}
			PORTC |=(1<<col);
 110:	35 b3       	in	r19, 0x15	; 21
 112:	23 2b       	or	r18, r19
 114:	25 bb       	out	0x15, r18	; 21
 116:	a9 ef       	ldi	r26, 0xF9	; 249
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	11 97       	sbiw	r26, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <Get_Key_Pressed+0x8e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <Get_Key_Pressed+0x94>
 120:	00 00       	nop
unsigned char Get_Key_Pressed()
{
	unsigned return_key;
	while (1)
	{
		for(int col=0;col<4;col++)
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	84 30       	cpi	r24, 0x04	; 4
 126:	91 05       	cpc	r25, r1
 128:	0c f4       	brge	.+2      	; 0x12c <Get_Key_Pressed+0xa0>
 12a:	b6 cf       	rjmp	.-148    	; 0x98 <Get_Key_Pressed+0xc>
 12c:	8f 2f       	mov	r24, r31
 12e:	9e 2f       	mov	r25, r30
 130:	b3 cf       	rjmp	.-154    	; 0x98 <Get_Key_Pressed+0xc>

00000132 <main>:

int main(void)
{
	//LED led1 = {B,P2};
	//lED_inti(&led1);
	LCD_init();
 132:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_init>
	Keypad_init();
 136:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
	int c = 0;
    while(1)
    {
		
		SetCursor(0,0);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 22 01 	call	0x244	; 0x244 <SetCursor>
		LCD_Write_str("Enter password");
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Write_str>
		unsigned char x =  Get_Key_Pressed();
 14e:	0e 94 46 00 	call	0x8c	; 0x8c <Get_Key_Pressed>
 152:	c8 2f       	mov	r28, r24
		SetCursor(1,c);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 22 01 	call	0x244	; 0x244 <SetCursor>
		LCD_Write_char(x);
 160:	8c 2f       	mov	r24, r28
 162:	0e 94 31 01 	call	0x262	; 0x262 <LCD_Write_char>
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	81 ee       	ldi	r24, 0xE1	; 225
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x3a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x44>
 176:	00 00       	nop
		_delay_ms(200);
		c++;
 178:	c1 e0       	ldi	r28, 0x01	; 1
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <main+0x50>
		if (c>15)
		c=0;
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
	Keypad_init();
	int c = 0;
    while(1)
    {
		
		SetCursor(0,0);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 22 01 	call	0x244	; 0x244 <SetCursor>
		LCD_Write_str("Enter password");
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 42 01 	call	0x284	; 0x284 <LCD_Write_str>
		unsigned char x =  Get_Key_Pressed();
 196:	0e 94 46 00 	call	0x8c	; 0x8c <Get_Key_Pressed>
 19a:	18 2f       	mov	r17, r24
		SetCursor(1,c);
 19c:	be 01       	movw	r22, r28
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 22 01 	call	0x244	; 0x244 <SetCursor>
		LCD_Write_char(x);
 1a6:	81 2f       	mov	r24, r17
 1a8:	0e 94 31 01 	call	0x262	; 0x262 <LCD_Write_char>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	81 ee       	ldi	r24, 0xE1	; 225
 1b0:	94 e0       	ldi	r25, 0x04	; 4
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x80>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x8a>
 1bc:	00 00       	nop
		_delay_ms(200);
		c++;
 1be:	21 96       	adiw	r28, 0x01	; 1
		if (c>15)
 1c0:	c0 31       	cpi	r28, 0x10	; 16
 1c2:	d1 05       	cpc	r29, r1
 1c4:	e4 f6       	brge	.-72     	; 0x17e <main+0x4c>
 1c6:	dd cf       	rjmp	.-70     	; 0x182 <main+0x50>

000001c8 <send_command>:
				PORTC &=~(1<<E);
				_delay_us(250);
				break;
				
				case A:
				PORTA &= ~(1<<RS);
 1c8:	de 98       	cbi	0x1b, 6	; 27
				PORTD =  cmd;
 1ca:	82 bb       	out	0x12, r24	; 18
				PORTA |=(1<<E);
 1cc:	df 9a       	sbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	83 ef       	ldi	r24, 0xF3	; 243
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <send_command+0xa>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <send_command+0x10>
 1d8:	00 00       	nop
				_delay_us(250);
				PORTA &=~(1<<E);
 1da:	df 98       	cbi	0x1b, 7	; 27
 1dc:	83 ef       	ldi	r24, 0xF3	; 243
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <send_command+0x18>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <send_command+0x1e>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f eb       	ldi	r18, 0xBF	; 191
 1ec:	8a ed       	ldi	r24, 0xDA	; 218
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <LCD_init+0x6>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_init+0x10>
 1fa:	00 00       	nop
	if(MODE == Eight_bit)
	{
		switch(Data_port)
		{
			case D:
			DDRD =  0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	81 bb       	out	0x11, r24	; 17
		{
			case C:
			DDRC |=  (1<<RS) |(1<<E);
			break;
			case A:
			DDRA |=  (1<<RS) |(1<<E);
 200:	8a b3       	in	r24, 0x1a	; 26
 202:	80 6c       	ori	r24, 0xC0	; 192
 204:	8a bb       	out	0x1a, r24	; 26
			break;
		}
	}
	send_command(FSet8b2L7);
 206:	88 e3       	ldi	r24, 0x38	; 56
 208:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <send_command>
 20c:	8f ec       	ldi	r24, 0xCF	; 207
 20e:	97 e0       	ldi	r25, 0x07	; 7
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_init+0x26>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_init+0x2c>
 216:	00 00       	nop
	_delay_ms(1);
	send_command(ON_OFFCNoB);
 218:	8e e0       	ldi	r24, 0x0E	; 14
 21a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <send_command>
 21e:	8f ec       	ldi	r24, 0xCF	; 207
 220:	97 e0       	ldi	r25, 0x07	; 7
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_init+0x38>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_init+0x3e>
 228:	00 00       	nop
	_delay_ms(1);
	send_command(Clear);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <send_command>
 230:	8f e9       	ldi	r24, 0x9F	; 159
 232:	9f e0       	ldi	r25, 0x0F	; 15
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_init+0x4a>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_init+0x50>
 23a:	00 00       	nop
	_delay_ms(2);
	send_command(EntryINCNOSH);
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <send_command>
 242:	08 95       	ret

00000244 <SetCursor>:
}


void SetCursor(int row, int col)
{
	switch (row)
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	19 f0       	breq	.+6      	; 0x24e <SetCursor+0xa>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	31 f0       	breq	.+12     	; 0x258 <SetCursor+0x14>
 24c:	08 95       	ret
	{
		case 0:
		send_command(0x80 +col);
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	86 0f       	add	r24, r22
 252:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <send_command>
		break;
 256:	08 95       	ret
		case 1:
		send_command(0xc0 +col);
 258:	80 ec       	ldi	r24, 0xC0	; 192
 25a:	86 0f       	add	r24, r22
 25c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <send_command>
 260:	08 95       	ret

00000262 <LCD_Write_char>:
				PORTC &=~(1<<E);
				_delay_us(250);
				break;
				
				case A:
				PORTA |= (1<<RS);
 262:	de 9a       	sbi	0x1b, 6	; 27
				PORTD =  x;
 264:	82 bb       	out	0x12, r24	; 18
				PORTA |=(1<<E);
 266:	df 9a       	sbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	83 ef       	ldi	r24, 0xF3	; 243
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCD_Write_char+0xa>
 270:	00 c0       	rjmp	.+0      	; 0x272 <LCD_Write_char+0x10>
 272:	00 00       	nop
				_delay_us(250);
				PORTA &=~(1<<E);
 274:	df 98       	cbi	0x1b, 7	; 27
 276:	83 ef       	ldi	r24, 0xF3	; 243
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <LCD_Write_char+0x18>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <LCD_Write_char+0x1e>
 280:	00 00       	nop
 282:	08 95       	ret

00000284 <LCD_Write_str>:
		}
		
	}
}
void LCD_Write_str(unsigned char *s)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	ec 01       	movw	r28, r24
	while(*s != '\0')
 28a:	88 81       	ld	r24, Y
 28c:	88 23       	and	r24, r24
 28e:	31 f0       	breq	.+12     	; 0x29c <LCD_Write_str+0x18>
 290:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_char(*s);
 292:	0e 94 31 01 	call	0x262	; 0x262 <LCD_Write_char>
		
	}
}
void LCD_Write_str(unsigned char *s)
{
	while(*s != '\0')
 296:	89 91       	ld	r24, Y+
 298:	81 11       	cpse	r24, r1
 29a:	fb cf       	rjmp	.-10     	; 0x292 <LCD_Write_str+0xe>
	{
		LCD_Write_char(*s);
		s++;
	}
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
