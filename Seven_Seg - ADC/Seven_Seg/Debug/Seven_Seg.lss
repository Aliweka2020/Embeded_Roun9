
Seven_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000280  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000346  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000024e  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000023b  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001c0  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000159  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000eb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  74:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:
#include "ADC.h"
#include <avr/io.h>
void ADC_init()
{
	
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS2);
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	85 68       	ori	r24, 0x85	; 133
  80:	86 b9       	out	0x06, r24	; 6
  82:	08 95       	ret

00000084 <ADC_Read>:
}
int ADC_Read(int ch)
{
	DDRA &= ~(1<<ch);
  84:	9a b3       	in	r25, 0x1a	; 26
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	08 2e       	mov	r0, r24
  8c:	02 c0       	rjmp	.+4      	; 0x92 <ADC_Read+0xe>
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <ADC_Read+0xa>
  96:	20 95       	com	r18
  98:	29 23       	and	r18, r25
  9a:	2a bb       	out	0x1a, r18	; 26
	ADMUX =  ch;
  9c:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<ADLAR);
  9e:	3d 9a       	sbi	0x07, 5	; 7
	
	ADCSRA |= (1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	while ( (ADCSRA & (1<<ADIF) ) ==0);
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_Read+0x1e>
	ADCSRA |= (1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
	return ((int) (ADCH));
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret

000000ae <Seg_print99>:
ISR(TIMER0_OVF_vect)
{
	 Seg_print99(i);
}
void Seg_print99(int num)
{
  ae:	9c 01       	movw	r18, r24
	PORTB |= (1<<4);
  b0:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &=~(1<<5);
  b2:	c5 98       	cbi	0x18, 5	; 24
	
	PORTB = (PORTB & 0xF0) | (num%10);
  b4:	48 b3       	in	r20, 0x18	; 24
  b6:	6a e0       	ldi	r22, 0x0A	; 10
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__divmodhi4>
  be:	40 7f       	andi	r20, 0xF0	; 240
  c0:	48 2b       	or	r20, r24
  c2:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <Seg_print99+0x1a>
  cc:	00 c0       	rjmp	.+0      	; 0xce <Seg_print99+0x20>
  ce:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1<<5);
  d0:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &=~(1<<4);
  d2:	c4 98       	cbi	0x18, 4	; 24
	PORTB = (PORTB & 0xF0) | (num/10);
  d4:	48 b3       	in	r20, 0x18	; 24
  d6:	c9 01       	movw	r24, r18
  d8:	6a e0       	ldi	r22, 0x0A	; 10
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__divmodhi4>
  e0:	40 7f       	andi	r20, 0xF0	; 240
  e2:	46 2b       	or	r20, r22
  e4:	48 bb       	out	0x18, r20	; 24
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	9e e4       	ldi	r25, 0x4E	; 78
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <Seg_print99+0x3c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <Seg_print99+0x42>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <__vector_11>:
#include <util/delay.h>
#include <avr/interrupt.h>
int i ;
#include "ADC.h"
ISR(TIMER0_OVF_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	 Seg_print99(i);
 116:	80 91 60 00 	lds	r24, 0x0060
 11a:	90 91 61 00 	lds	r25, 0x0061
 11e:	0e 94 57 00 	call	0xae	; 0xae <Seg_print99>
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <main>:
	PORTB = (PORTB & 0xF0) | (num/10);
	_delay_ms(10);
}
int main(void)
{
	TCCR0 |= (1<<CS00) | (1<<CS02) ; //Normal Mode 1024 prescalar
 144:	83 b7       	in	r24, 0x33	; 51
 146:	85 60       	ori	r24, 0x05	; 5
 148:	83 bf       	out	0x33, r24	; 51
	TIMSK |=(1<<TOIE0);  //enable interrupt when overflow occur
 14a:	89 b7       	in	r24, 0x39	; 57
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
 150:	12 be       	out	0x32, r1	; 50
	sei();
 152:	78 94       	sei
	
	
	DDRB = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	87 bb       	out	0x17, r24	; 23
	//DDRD = 0xFF;
	DDRC = 0xFF;
 158:	84 bb       	out	0x14, r24	; 20
	int nums[] = {0b01000000,0b01111001,0b00100100};
	ADC_init();
 15a:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
    while(1)
    {
		int temp = ADC_Read(0);
		i  = temp * 500 /256;
 15e:	c4 ef       	ldi	r28, 0xF4	; 244
 160:	d1 e0       	ldi	r29, 0x01	; 1
	DDRC = 0xFF;
	int nums[] = {0b01000000,0b01111001,0b00100100};
	ADC_init();
    while(1)
    {
		int temp = ADC_Read(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 42 00 	call	0x84	; 0x84 <ADC_Read>
		i  = temp * 500 /256;
 16a:	9c 01       	movw	r18, r24
 16c:	2c 9f       	mul	r18, r28
 16e:	c0 01       	movw	r24, r0
 170:	2d 9f       	mul	r18, r29
 172:	90 0d       	add	r25, r0
 174:	3c 9f       	mul	r19, r28
 176:	90 0d       	add	r25, r0
 178:	11 24       	eor	r1, r1
 17a:	99 23       	and	r25, r25
 17c:	14 f4       	brge	.+4      	; 0x182 <main+0x3e>
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	89 2f       	mov	r24, r25
 184:	88 0f       	add	r24, r24
 186:	88 0b       	sbc	r24, r24
 188:	90 93 60 00 	sts	0x0060, r25
 18c:	80 93 61 00 	sts	0x0061, r24
		
		int LDR =  ADC_Read(1);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 42 00 	call	0x84	; 0x84 <ADC_Read>
		if(LDR<125)
 198:	8d 37       	cpi	r24, 0x7D	; 125
 19a:	91 05       	cpc	r25, r1
 19c:	14 f4       	brge	.+4      	; 0x1a2 <main+0x5e>
		PORTC |=(1<<0);
 19e:	a8 9a       	sbi	0x15, 0	; 21
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <main+0x60>
		else
		PORTC =0;
 1a2:	15 ba       	out	0x15, r1	; 21
 1a4:	3f e7       	ldi	r19, 0x7F	; 127
 1a6:	8a e1       	ldi	r24, 0x1A	; 26
 1a8:	96 e0       	ldi	r25, 0x06	; 6
 1aa:	31 50       	subi	r19, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x66>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x70>
 1b4:	00 00       	nop
 1b6:	d5 cf       	rjmp	.-86     	; 0x162 <main+0x1e>

000001b8 <__divmodhi4>:
 1b8:	97 fb       	bst	r25, 7
 1ba:	07 2e       	mov	r0, r23
 1bc:	16 f4       	brtc	.+4      	; 0x1c2 <__divmodhi4+0xa>
 1be:	00 94       	com	r0
 1c0:	07 d0       	rcall	.+14     	; 0x1d0 <__divmodhi4_neg1>
 1c2:	77 fd       	sbrc	r23, 7
 1c4:	09 d0       	rcall	.+18     	; 0x1d8 <__divmodhi4_neg2>
 1c6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__udivmodhi4>
 1ca:	07 fc       	sbrc	r0, 7
 1cc:	05 d0       	rcall	.+10     	; 0x1d8 <__divmodhi4_neg2>
 1ce:	3e f4       	brtc	.+14     	; 0x1de <__divmodhi4_exit>

000001d0 <__divmodhi4_neg1>:
 1d0:	90 95       	com	r25
 1d2:	81 95       	neg	r24
 1d4:	9f 4f       	sbci	r25, 0xFF	; 255
 1d6:	08 95       	ret

000001d8 <__divmodhi4_neg2>:
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255

000001de <__divmodhi4_exit>:
 1de:	08 95       	ret

000001e0 <__udivmodhi4>:
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	51 e1       	ldi	r21, 0x11	; 17
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__udivmodhi4_ep>

000001e8 <__udivmodhi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	a6 17       	cp	r26, r22
 1ee:	b7 07       	cpc	r27, r23
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <__udivmodhi4_ep>
 1f2:	a6 1b       	sub	r26, r22
 1f4:	b7 0b       	sbc	r27, r23

000001f6 <__udivmodhi4_ep>:
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	5a 95       	dec	r21
 1fc:	a9 f7       	brne	.-22     	; 0x1e8 <__udivmodhi4_loop>
 1fe:	80 95       	com	r24
 200:	90 95       	com	r25
 202:	bc 01       	movw	r22, r24
 204:	cd 01       	movw	r24, r26
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
