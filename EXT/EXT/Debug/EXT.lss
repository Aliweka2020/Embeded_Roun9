
EXT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000018e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000420  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000024a  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000233  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019e  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000143  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 00 	call	0xce	; 0xce <main>
  7a:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_1>:
#include "LED.h"
#include <util/delay.h>
#include <avr/interrupt.h>
LED l1 = {B,P0};
ISR(INT0_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	2f 93       	push	r18
  8e:	3f 93       	push	r19
  90:	4f 93       	push	r20
  92:	5f 93       	push	r21
  94:	6f 93       	push	r22
  96:	7f 93       	push	r23
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  9c:	af 93       	push	r26
  9e:	bf 93       	push	r27
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	LED_OFF(&l1);
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 b2 00 	call	0x164	; 0x164 <LED_OFF>
}
  ac:	ff 91       	pop	r31
  ae:	ef 91       	pop	r30
  b0:	bf 91       	pop	r27
  b2:	af 91       	pop	r26
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	7f 91       	pop	r23
  ba:	6f 91       	pop	r22
  bc:	5f 91       	pop	r21
  be:	4f 91       	pop	r20
  c0:	3f 91       	pop	r19
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:
int main(void)
{
	
	lED_inti(&l1);
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 8e 00 	call	0x11c	; 0x11c <lED_inti>
	DDRD &=~(1<<2);
  d6:	8a 98       	cbi	0x11, 2	; 17
	GICR |= (1<<INT0);
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=  (1<<ISC01);
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	85 bf       	out	0x35, r24	; 53
	sei();
  e4:	78 94       	sei
	//SREG |=(1<<7);
    while(1)
    {
		LED_ON(&l1);
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 a0 00 	call	0x140	; 0x140 <LED_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f e7       	ldi	r18, 0x7F	; 127
  f0:	8a e1       	ldi	r24, 0x1A	; 26
  f2:	96 e0       	ldi	r25, 0x06	; 6
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x26>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x30>
  fe:	00 00       	nop
		_delay_ms(2000);
		LED_OFF(&l1);
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 b2 00 	call	0x164	; 0x164 <LED_OFF>
 108:	2f e7       	ldi	r18, 0x7F	; 127
 10a:	8a e1       	ldi	r24, 0x1A	; 26
 10c:	96 e0       	ldi	r25, 0x06	; 6
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x40>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x4a>
 118:	00 00       	nop
 11a:	e5 cf       	rjmp	.-54     	; 0xe6 <main+0x18>

0000011c <lED_inti>:
#include "LED.h"
#include <avr/io.h>

void lED_inti(LED *l)
{
	switch (l->p)
 11c:	fc 01       	movw	r30, r24
 11e:	20 81       	ld	r18, Z
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	69 f4       	brne	.+26     	; 0x13e <lED_inti+0x22>
	{
		case A:
		
		break;
		case B:
		DDRB |= (1<<l->pi);
 124:	47 b3       	in	r20, 0x17	; 23
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	01 80       	ldd	r0, Z+1	; 0x01
 12e:	02 c0       	rjmp	.+4      	; 0x134 <lED_inti+0x18>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <lED_inti+0x14>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	08 95       	ret

00000140 <LED_ON>:
		break;
	}
}
void LED_ON(LED *l)
{
	switch (l->p)
 140:	fc 01       	movw	r30, r24
 142:	20 81       	ld	r18, Z
 144:	21 30       	cpi	r18, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <LED_ON+0x22>
	{
		case A:
		
		break;
		case B:
		PORTB |= (1<<l->pi);
 148:	48 b3       	in	r20, 0x18	; 24
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	01 80       	ldd	r0, Z+1	; 0x01
 152:	02 c0       	rjmp	.+4      	; 0x158 <LED_ON+0x18>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <LED_ON+0x14>
 15c:	cb 01       	movw	r24, r22
 15e:	84 2b       	or	r24, r20
 160:	88 bb       	out	0x18, r24	; 24
 162:	08 95       	ret

00000164 <LED_OFF>:
		break;
	}
}
void LED_OFF(LED *l)
{
	switch (l->p)
 164:	fc 01       	movw	r30, r24
 166:	20 81       	ld	r18, Z
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	71 f4       	brne	.+28     	; 0x188 <LED_OFF+0x24>
	{
		case A:
		
		break;
		case B:
		PORTB &= ~(1<<l->pi);
 16c:	48 b3       	in	r20, 0x18	; 24
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	b9 01       	movw	r22, r18
 174:	01 80       	ldd	r0, Z+1	; 0x01
 176:	02 c0       	rjmp	.+4      	; 0x17c <LED_OFF+0x18>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <LED_OFF+0x14>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	88 bb       	out	0x18, r24	; 24
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
