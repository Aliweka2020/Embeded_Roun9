
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000215  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000128  00000000  00000000  0000051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000132  00000000  00000000  00000643  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000016e  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000021e  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 00 01 	call	0x200	; 0x200 <main>
  64:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pinMode>:
 */ 
#include <avr/io.h>
#include "DIO.h"
void pinMode(unsigned char pin , unsigned char dir)
{
	if (pin >0 && pin <9)
  6c:	9f ef       	ldi	r25, 0xFF	; 255
  6e:	98 0f       	add	r25, r24
  70:	98 30       	cpi	r25, 0x08	; 8
  72:	00 f5       	brcc	.+64     	; 0xb4 <pinMode+0x48>
	{
		if (dir == OUTPUT)
  74:	61 11       	cpse	r22, r1
  76:	0d c0       	rjmp	.+26     	; 0x92 <pinMode+0x26>
		DDRB |=(1<<(pin-PORTB_Start));
  78:	47 b3       	in	r20, 0x17	; 23
  7a:	21 e0       	ldi	r18, 0x01	; 1
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	b9 01       	movw	r22, r18
  80:	02 c0       	rjmp	.+4      	; 0x86 <pinMode+0x1a>
  82:	66 0f       	add	r22, r22
  84:	77 1f       	adc	r23, r23
  86:	9a 95       	dec	r25
  88:	e2 f7       	brpl	.-8      	; 0x82 <pinMode+0x16>
  8a:	cb 01       	movw	r24, r22
  8c:	84 2b       	or	r24, r20
  8e:	87 bb       	out	0x17, r24	; 23
  90:	08 95       	ret
		else if (dir == INPUT)
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	91 f5       	brne	.+100    	; 0xfa <pinMode+0x8e>
		DDRB &=~(1<<(pin-PORTB_Start));
  96:	47 b3       	in	r20, 0x17	; 23
  98:	81 50       	subi	r24, 0x01	; 1
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	b9 01       	movw	r22, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <pinMode+0x3a>
  a2:	66 0f       	add	r22, r22
  a4:	77 1f       	adc	r23, r23
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <pinMode+0x36>
  aa:	cb 01       	movw	r24, r22
  ac:	80 95       	com	r24
  ae:	84 23       	and	r24, r20
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	08 95       	ret
	}
	else if (pin >13 && pin <22)
  b4:	92 ef       	ldi	r25, 0xF2	; 242
  b6:	98 0f       	add	r25, r24
  b8:	98 30       	cpi	r25, 0x08	; 8
  ba:	f8 f4       	brcc	.+62     	; 0xfa <pinMode+0x8e>
	{
		if (dir == OUTPUT)
  bc:	61 11       	cpse	r22, r1
  be:	0d c0       	rjmp	.+26     	; 0xda <pinMode+0x6e>
		DDRD |=(1<<(pin-PORTD_Start));
  c0:	41 b3       	in	r20, 0x11	; 17
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	b9 01       	movw	r22, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <pinMode+0x62>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	9a 95       	dec	r25
  d0:	e2 f7       	brpl	.-8      	; 0xca <pinMode+0x5e>
  d2:	cb 01       	movw	r24, r22
  d4:	84 2b       	or	r24, r20
  d6:	81 bb       	out	0x11, r24	; 17
  d8:	08 95       	ret
		else if (dir == INPUT)
  da:	61 30       	cpi	r22, 0x01	; 1
  dc:	71 f4       	brne	.+28     	; 0xfa <pinMode+0x8e>
		DDRD &=~(1<<(pin-PORTD_Start));
  de:	41 b3       	in	r20, 0x11	; 17
  e0:	8e 50       	subi	r24, 0x0E	; 14
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	b9 01       	movw	r22, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <pinMode+0x82>
  ea:	66 0f       	add	r22, r22
  ec:	77 1f       	adc	r23, r23
  ee:	8a 95       	dec	r24
  f0:	e2 f7       	brpl	.-8      	; 0xea <pinMode+0x7e>
  f2:	cb 01       	movw	r24, r22
  f4:	80 95       	com	r24
  f6:	84 23       	and	r24, r20
  f8:	81 bb       	out	0x11, r24	; 17
  fa:	08 95       	ret

000000fc <digitalWrite>:
	}
}
void digitalWrite(unsigned char pin, unsigned char val)
{
	if (pin >0 && pin <9)
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	00 f5       	brcc	.+64     	; 0x144 <digitalWrite+0x48>
	{
		if (val == HIGH)
 104:	61 30       	cpi	r22, 0x01	; 1
 106:	69 f4       	brne	.+26     	; 0x122 <digitalWrite+0x26>
		PORTB |=(1<<(pin-PORTB_Start));
 108:	48 b3       	in	r20, 0x18	; 24
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <digitalWrite+0x1a>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	9a 95       	dec	r25
 118:	e2 f7       	brpl	.-8      	; 0x112 <digitalWrite+0x16>
 11a:	cb 01       	movw	r24, r22
 11c:	84 2b       	or	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		else if(val == LOW)
 122:	61 11       	cpse	r22, r1
 124:	32 c0       	rjmp	.+100    	; 0x18a <digitalWrite+0x8e>
		PORTB &=~(1<<(pin-PORTB_Start));
 126:	48 b3       	in	r20, 0x18	; 24
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <digitalWrite+0x3a>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <digitalWrite+0x36>
 13a:	cb 01       	movw	r24, r22
 13c:	80 95       	com	r24
 13e:	84 23       	and	r24, r20
 140:	88 bb       	out	0x18, r24	; 24
 142:	08 95       	ret
	}
	else if (pin >13 && pin <22)
 144:	92 ef       	ldi	r25, 0xF2	; 242
 146:	98 0f       	add	r25, r24
 148:	98 30       	cpi	r25, 0x08	; 8
 14a:	f8 f4       	brcc	.+62     	; 0x18a <digitalWrite+0x8e>
	{
		if (val == HIGH)
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <digitalWrite+0x6e>
		PORTD |=(1<<(pin-PORTD_Start));
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <digitalWrite+0x62>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <digitalWrite+0x5e>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
		else if(val == LOW)
 16a:	61 11       	cpse	r22, r1
 16c:	0e c0       	rjmp	.+28     	; 0x18a <digitalWrite+0x8e>
		PORTD &=~(1<<(pin-PORTD_Start));
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	8e 50       	subi	r24, 0x0E	; 14
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <digitalWrite+0x82>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <digitalWrite+0x7e>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	82 bb       	out	0x12, r24	; 18
 18a:	08 95       	ret

0000018c <digitalRead>:
	}
}
unsigned char digitalRead(unsigned char pin)
{
	if (pin >0 && pin <9)
 18c:	9f ef       	ldi	r25, 0xFF	; 255
 18e:	98 0f       	add	r25, r24
 190:	98 30       	cpi	r25, 0x08	; 8
 192:	b0 f4       	brcc	.+44     	; 0x1c0 <digitalRead+0x34>
	{
		return ((PINB&(1<<(pin-PORTB_Start) )>> (pin-PORTB_Start)));
 194:	96 b3       	in	r25, 0x16	; 22
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	31 09       	sbc	r19, r1
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	02 2e       	mov	r0, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <digitalRead+0x1e>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	0a 94       	dec	r0
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <digitalRead+0x1a>
 1ae:	ba 01       	movw	r22, r20
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <digitalRead+0x2a>
 1b2:	75 95       	asr	r23
 1b4:	67 95       	ror	r22
 1b6:	2a 95       	dec	r18
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <digitalRead+0x26>
 1ba:	9b 01       	movw	r18, r22
 1bc:	29 23       	and	r18, r25
 1be:	1e c0       	rjmp	.+60     	; 0x1fc <digitalRead+0x70>
	}
	else if (pin >13 && pin <22)
 1c0:	92 ef       	ldi	r25, 0xF2	; 242
 1c2:	98 0f       	add	r25, r24
 1c4:	98 30       	cpi	r25, 0x08	; 8
 1c6:	c8 f4       	brcc	.+50     	; 0x1fa <digitalRead+0x6e>
	{
		return ((PIND&(1<<(pin-PORTD_Start) ))>> ((pin-PORTD_Start)));
 1c8:	90 b3       	in	r25, 0x10	; 16
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	2e 50       	subi	r18, 0x0E	; 14
 1d0:	31 09       	sbc	r19, r1
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	02 2e       	mov	r0, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <digitalRead+0x52>
 1da:	44 0f       	add	r20, r20
 1dc:	55 1f       	adc	r21, r21
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <digitalRead+0x4e>
 1e2:	89 2f       	mov	r24, r25
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	84 23       	and	r24, r20
 1e8:	95 23       	and	r25, r21
 1ea:	ac 01       	movw	r20, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <digitalRead+0x66>
 1ee:	55 95       	asr	r21
 1f0:	47 95       	ror	r20
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <digitalRead+0x62>
 1f6:	9a 01       	movw	r18, r20
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <digitalRead+0x70>
 1fa:	08 95       	ret
 1fc:	82 2f       	mov	r24, r18
	}
}
 1fe:	08 95       	ret

00000200 <main>:
#define Button 18

int main(void)
{
	//DDRB |= (1<<LED);
	pinMode(LED,OUTPUT);
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	85 e1       	ldi	r24, 0x15	; 21
 204:	0e 94 36 00 	call	0x6c	; 0x6c <pinMode>
	//DDRD &= ~(1<<Button);
	pinMode(Button,INPUT);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	82 e1       	ldi	r24, 0x12	; 18
 20c:	0e 94 36 00 	call	0x6c	; 0x6c <pinMode>
    while(1)
    {
        if(digitalRead(Button) ==HIGH)
 210:	82 e1       	ldi	r24, 0x12	; 18
 212:	0e 94 c6 00 	call	0x18c	; 0x18c <digitalRead>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	29 f4       	brne	.+10     	; 0x224 <main+0x24>
		{
			//PORTB |= (1<<LED);
			digitalWrite(LED,HIGH);
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	85 e1       	ldi	r24, 0x15	; 21
 21e:	0e 94 7e 00 	call	0xfc	; 0xfc <digitalWrite>
 222:	f6 cf       	rjmp	.-20     	; 0x210 <main+0x10>
		}
		else
		{
			//PORTB &= ~(1<<LED);
			digitalWrite(LED,LOW);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	85 e1       	ldi	r24, 0x15	; 21
 228:	0e 94 7e 00 	call	0xfc	; 0xfc <digitalWrite>
 22c:	f1 cf       	rjmp	.-30     	; 0x210 <main+0x10>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
