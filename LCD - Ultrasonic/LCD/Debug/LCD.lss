
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000024e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d6  00000000  00000000  00000a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020e  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d7  00000000  00000000  0000133a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
#define  Trigger_pin	PA0	/* Trigger pin */
#include <avr/interrupt.h>
int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
  a0:	80 91 6c 00 	lds	r24, 0x006C
  a4:	90 91 6d 00 	lds	r25, 0x006D
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 6d 00 	sts	0x006D, r25
  ae:	80 93 6c 00 	sts	0x006C, r24
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:
int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2a 97       	sbiw	r28, 0x0a	; 10
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
  d4:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_init>
	char string[10];
	long count;
	double distance;
	DDRA = 0x01;		/* Make trigger pin as output */
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8a bb       	out	0x1a, r24	; 26
	PORTD = 0xFF;		/* Turn on Pull-up */
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	82 bb       	out	0x12, r24	; 18
	
	sei();			/* Enable global interrupt */
  e0:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
  e2:	84 e0       	ldi	r24, 0x04	; 4
  e4:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
  e6:	1f bc       	out	0x2f, r1	; 47
		PORTA |= (1 << Trigger_pin);
		_delay_us(10);
		PORTA &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
  e8:	0f 2e       	mov	r0, r31
  ea:	f1 e4       	ldi	r31, 0x41	; 65
  ec:	ff 2e       	mov	r15, r31
  ee:	f0 2d       	mov	r31, r0
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
  f0:	00 e2       	ldi	r16, 0x20	; 32
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
  f2:	14 e0       	ldi	r17, 0x04	; 4
	sei();			/* Enable global interrupt */
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
    while(1)
    {
		send_command(0x01);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
        SetCursor(0,0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SetCursor>
		LCD_Write_str("Distance = ");
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Write_str>
		
		
		PORTA |= (1 << Trigger_pin);
 10e:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	23 e0       	ldi	r18, 0x03	; 3
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x52>
 116:	00 00       	nop
		_delay_us(10);
		PORTA &= (~(1 << Trigger_pin));
 118:	d8 98       	cbi	0x1b, 0	; 27
		
		TCNT1 = 0;	/* Clear Timer counter */
 11a:	1d bc       	out	0x2d, r1	; 45
 11c:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
 11e:	fe bc       	out	0x2e, r15	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 120:	08 bf       	out	0x38, r16	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 122:	18 bf       	out	0x38, r17	; 56

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
 124:	08 b6       	in	r0, 0x38	; 56
 126:	05 fe       	sbrs	r0, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <main+0x64>
		TCNT1 = 0;	/* Clear Timer counter */
 12a:	1d bc       	out	0x2d, r1	; 45
 12c:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	8e bd       	out	0x2e, r24	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
 132:	08 bf       	out	0x38, r16	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
 134:	18 bf       	out	0x38, r17	; 56
		TimerOverflow = 0;/* Clear Timer overflow count */
 136:	10 92 6d 00 	sts	0x006D, r1
 13a:	10 92 6c 00 	sts	0x006C, r1

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
 13e:	08 b6       	in	r0, 0x38	; 56
 140:	05 fe       	sbrs	r0, 5
 142:	fd cf       	rjmp	.-6      	; 0x13e <main+0x7e>
		count = (ICR1 + (65535 * TimerOverflow));	/* Take count */
 144:	86 b5       	in	r24, 0x26	; 38
 146:	97 b5       	in	r25, 0x27	; 39
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		SetCursor(1,1);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SetCursor>
		LCD_Write_str(string);	/* Print distance */
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	96 e8       	ldi	r25, 0x86	; 134
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	81 50       	subi	r24, 0x01	; 1
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	20 40       	sbci	r18, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xa2>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xac>
 16c:	00 00       	nop
 16e:	c2 cf       	rjmp	.-124    	; 0xf4 <main+0x34>

00000170 <send_command>:
			break;
			case C:
			switch(Control_port)
			{
				case B:
				PORTB &= ~(1<<RS);
 170:	c0 98       	cbi	0x18, 0	; 24
				PORTC =  cmd;
 172:	85 bb       	out	0x15, r24	; 21
				PORTB |=(1<<E);
 174:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	83 ef       	ldi	r24, 0xF3	; 243
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <send_command+0xa>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <send_command+0x10>
 180:	00 00       	nop
				_delay_us(250);
				PORTB &=~(1<<E);
 182:	c1 98       	cbi	0x18, 1	; 24
 184:	83 ef       	ldi	r24, 0xF3	; 243
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <send_command+0x18>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <send_command+0x1e>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <LCD_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f eb       	ldi	r18, 0xBF	; 191
 194:	8a ed       	ldi	r24, 0xDA	; 218
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <LCD_init+0x6>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCD_init+0x10>
 1a2:	00 00       	nop
		{
			case D:
			DDRD =  0xFF;
			break;
			case C:
			DDRC =  0xFF;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	84 bb       	out	0x14, r24	; 20
		{
			case C:
			DDRC |=  (1<<RS) |(1<<E);
			break;
			case B:
			DDRB |=  (1<<RS) |(1<<E);
 1a8:	87 b3       	in	r24, 0x17	; 23
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	87 bb       	out	0x17, r24	; 23
			break;
		}
	}
	send_command(FSet8b2L7);
 1ae:	88 e3       	ldi	r24, 0x38	; 56
 1b0:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
 1b4:	8f ec       	ldi	r24, 0xCF	; 207
 1b6:	97 e0       	ldi	r25, 0x07	; 7
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_init+0x26>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_init+0x2c>
 1be:	00 00       	nop
	_delay_ms(1);
	send_command(ON_OFFCNoB);
 1c0:	8e e0       	ldi	r24, 0x0E	; 14
 1c2:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
 1c6:	8f ec       	ldi	r24, 0xCF	; 207
 1c8:	97 e0       	ldi	r25, 0x07	; 7
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_init+0x38>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_init+0x3e>
 1d0:	00 00       	nop
	_delay_ms(1);
	send_command(Clear);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_init+0x4a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_init+0x50>
 1e2:	00 00       	nop
	_delay_ms(2);
	send_command(EntryINCNOSH);
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
 1ea:	08 95       	ret

000001ec <SetCursor>:
}


void SetCursor(int row, int col)
{
	switch (row)
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <SetCursor+0xa>
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	31 f0       	breq	.+12     	; 0x200 <SetCursor+0x14>
 1f4:	08 95       	ret
	{
		case 0:
		send_command(0x80 +col);
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	86 0f       	add	r24, r22
 1fa:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
		break;
 1fe:	08 95       	ret
		case 1:
		send_command(0xc0 +col);
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	86 0f       	add	r24, r22
 204:	0e 94 b8 00 	call	0x170	; 0x170 <send_command>
 208:	08 95       	ret

0000020a <LCD_Write_char>:
			break;
			case C:
			switch(Control_port)
			{
				case B:
				PORTB |= (1<<RS);
 20a:	c0 9a       	sbi	0x18, 0	; 24
				PORTC =  x;
 20c:	85 bb       	out	0x15, r24	; 21
				PORTB |=(1<<E);
 20e:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	83 ef       	ldi	r24, 0xF3	; 243
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_Write_char+0xa>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_Write_char+0x10>
 21a:	00 00       	nop
				_delay_us(250);
				PORTB &=~(1<<E);
 21c:	c1 98       	cbi	0x18, 1	; 24
 21e:	83 ef       	ldi	r24, 0xF3	; 243
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_Write_char+0x18>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_Write_char+0x1e>
 228:	00 00       	nop
 22a:	08 95       	ret

0000022c <LCD_Write_str>:
		}
		
	}
}
void LCD_Write_str(unsigned char *s)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
	while(*s != '\0')
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	31 f0       	breq	.+12     	; 0x244 <LCD_Write_str+0x18>
 238:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Write_char(*s);
 23a:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_Write_char>
		
	}
}
void LCD_Write_str(unsigned char *s)
{
	while(*s != '\0')
 23e:	89 91       	ld	r24, Y+
 240:	81 11       	cpse	r24, r1
 242:	fb cf       	rjmp	.-10     	; 0x23a <LCD_Write_str+0xe>
	{
		LCD_Write_char(*s);
		s++;
	}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
