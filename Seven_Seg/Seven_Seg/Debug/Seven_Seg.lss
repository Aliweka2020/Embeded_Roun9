
Seven_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000226  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000213  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015e  00000000  00000000  00000499  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000016d  00000000  00000000  000005f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000008c  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000198  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f3  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 89 00 	call	0x112	; 0x112 <main>
  74:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Seg_print99>:
ISR(TIMER0_OVF_vect)
{
	 Seg_print99(i);
}
void Seg_print99(int num)
{
  7c:	9c 01       	movw	r18, r24
	PORTB |= (1<<4);
  7e:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &=~(1<<5);
  80:	c5 98       	cbi	0x18, 5	; 24
	
	PORTB = (PORTB & 0xF0) | (num%10);
  82:	48 b3       	in	r20, 0x18	; 24
  84:	6a e0       	ldi	r22, 0x0A	; 10
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	0e 94 af 00 	call	0x15e	; 0x15e <__divmodhi4>
  8c:	40 7f       	andi	r20, 0xF0	; 240
  8e:	48 2b       	or	r20, r24
  90:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <Seg_print99+0x1a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <Seg_print99+0x20>
  9c:	00 00       	nop
	_delay_ms(10);
	PORTB |= (1<<5);
  9e:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &=~(1<<4);
  a0:	c4 98       	cbi	0x18, 4	; 24
	PORTB = (PORTB & 0xF0) | (num/10);
  a2:	48 b3       	in	r20, 0x18	; 24
  a4:	c9 01       	movw	r24, r18
  a6:	6a e0       	ldi	r22, 0x0A	; 10
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	0e 94 af 00 	call	0x15e	; 0x15e <__divmodhi4>
  ae:	40 7f       	andi	r20, 0xF0	; 240
  b0:	46 2b       	or	r20, r22
  b2:	48 bb       	out	0x18, r20	; 24
  b4:	8f e1       	ldi	r24, 0x1F	; 31
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <Seg_print99+0x3c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <Seg_print99+0x42>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <__vector_11>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
int i ;
ISR(TIMER0_OVF_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	 Seg_print99(i);
  e4:	80 91 60 00 	lds	r24, 0x0060
  e8:	90 91 61 00 	lds	r25, 0x0061
  ec:	0e 94 3e 00 	call	0x7c	; 0x7c <Seg_print99>
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:
	PORTB = (PORTB & 0xF0) | (num/10);
	_delay_ms(10);
}
int main(void)
{
	TCCR0 |= (1<<CS00) | (1<<CS02) ; //Normal Mode 1024 prescalar
 112:	83 b7       	in	r24, 0x33	; 51
 114:	85 60       	ori	r24, 0x05	; 5
 116:	83 bf       	out	0x33, r24	; 51
	TIMSK |=(1<<TOIE0);  //enable interrupt when overflow occur
 118:	89 b7       	in	r24, 0x39	; 57
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0;
 11e:	12 be       	out	0x32, r1	; 50
	sei();
 120:	78 94       	sei
	
	
	DDRB = 0xFF;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 126:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 128:	84 bb       	out	0x14, r24	; 20
	int nums[] = {0b01000000,0b01111001,0b00100100};
    while(1)
    {
		
		
		for ( i =0 ; i<100; i ++)
 12a:	10 92 61 00 	sts	0x0061, r1
 12e:	10 92 60 00 	sts	0x0060, r1
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x26>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x30>
 142:	00 00       	nop
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	90 91 61 00 	lds	r25, 0x0061
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 61 00 	sts	0x0061, r25
 152:	80 93 60 00 	sts	0x0060, r24
 156:	84 36       	cpi	r24, 0x64	; 100
 158:	91 05       	cpc	r25, r1
 15a:	5c f3       	brlt	.-42     	; 0x132 <main+0x20>
 15c:	e6 cf       	rjmp	.-52     	; 0x12a <main+0x18>

0000015e <__divmodhi4>:
 15e:	97 fb       	bst	r25, 7
 160:	07 2e       	mov	r0, r23
 162:	16 f4       	brtc	.+4      	; 0x168 <__divmodhi4+0xa>
 164:	00 94       	com	r0
 166:	07 d0       	rcall	.+14     	; 0x176 <__divmodhi4_neg1>
 168:	77 fd       	sbrc	r23, 7
 16a:	09 d0       	rcall	.+18     	; 0x17e <__divmodhi4_neg2>
 16c:	0e 94 c3 00 	call	0x186	; 0x186 <__udivmodhi4>
 170:	07 fc       	sbrc	r0, 7
 172:	05 d0       	rcall	.+10     	; 0x17e <__divmodhi4_neg2>
 174:	3e f4       	brtc	.+14     	; 0x184 <__divmodhi4_exit>

00000176 <__divmodhi4_neg1>:
 176:	90 95       	com	r25
 178:	81 95       	neg	r24
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	08 95       	ret

0000017e <__divmodhi4_neg2>:
 17e:	70 95       	com	r23
 180:	61 95       	neg	r22
 182:	7f 4f       	sbci	r23, 0xFF	; 255

00000184 <__divmodhi4_exit>:
 184:	08 95       	ret

00000186 <__udivmodhi4>:
 186:	aa 1b       	sub	r26, r26
 188:	bb 1b       	sub	r27, r27
 18a:	51 e1       	ldi	r21, 0x11	; 17
 18c:	07 c0       	rjmp	.+14     	; 0x19c <__udivmodhi4_ep>

0000018e <__udivmodhi4_loop>:
 18e:	aa 1f       	adc	r26, r26
 190:	bb 1f       	adc	r27, r27
 192:	a6 17       	cp	r26, r22
 194:	b7 07       	cpc	r27, r23
 196:	10 f0       	brcs	.+4      	; 0x19c <__udivmodhi4_ep>
 198:	a6 1b       	sub	r26, r22
 19a:	b7 0b       	sbc	r27, r23

0000019c <__udivmodhi4_ep>:
 19c:	88 1f       	adc	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	5a 95       	dec	r21
 1a2:	a9 f7       	brne	.-22     	; 0x18e <__udivmodhi4_loop>
 1a4:	80 95       	com	r24
 1a6:	90 95       	com	r25
 1a8:	bc 01       	movw	r22, r24
 1aa:	cd 01       	movw	r24, r26
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
