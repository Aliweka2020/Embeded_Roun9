
Seven_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001fc  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000136  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000168  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018c  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000005a  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Seg_print99>:

#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
void Seg_print99(int num)
{
  6c:	9c 01       	movw	r18, r24
	PORTB |= (1<<4);
  6e:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &=~(1<<5);
  70:	c5 98       	cbi	0x18, 5	; 24
	
	PORTB = (PORTB & 0xF0) | (num%10);
  72:	48 b3       	in	r20, 0x18	; 24
  74:	6a e0       	ldi	r22, 0x0A	; 10
  76:	70 e0       	ldi	r23, 0x00	; 0
  78:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  7c:	40 7f       	andi	r20, 0xF0	; 240
  7e:	48 2b       	or	r20, r24
  80:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	4f e7       	ldi	r20, 0x7F	; 127
  84:	88 e3       	ldi	r24, 0x38	; 56
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	41 50       	subi	r20, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <Seg_print99+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <Seg_print99+0x26>
  92:	00 00       	nop
	_delay_ms(50);
	PORTB |= (1<<5);
  94:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &=~(1<<4);
  96:	c4 98       	cbi	0x18, 4	; 24
	PORTB = (PORTB & 0xF0) | (num/10);
  98:	48 b3       	in	r20, 0x18	; 24
  9a:	c9 01       	movw	r24, r18
  9c:	6a e0       	ldi	r22, 0x0A	; 10
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  a4:	40 7f       	andi	r20, 0xF0	; 240
  a6:	46 2b       	or	r20, r22
  a8:	48 bb       	out	0x18, r20	; 24
  aa:	2f e7       	ldi	r18, 0x7F	; 127
  ac:	48 e3       	ldi	r20, 0x38	; 56
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	40 40       	sbci	r20, 0x00	; 0
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <Seg_print99+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <Seg_print99+0x4e>
  ba:	00 00       	nop
  bc:	08 95       	ret

000000be <main>:
	_delay_ms(50);
}
int main(void)
{
	DDRB = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
  c2:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
  c4:	84 bb       	out	0x14, r24	; 20
	int nums[] = {0b01000000,0b01111001,0b00100100};
    while(1)
    {
		
		
		for (int i =0 ; i<100; i ++)
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	00 e0       	ldi	r16, 0x00	; 0
  cc:	10 e0       	ldi	r17, 0x00	; 0
		{
			Seg_print99 (i);
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 36 00 	call	0x6c	; 0x6c <Seg_print99>
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x1c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x26>
  e4:	00 00       	nop
	int nums[] = {0b01000000,0b01111001,0b00100100};
    while(1)
    {
		
		
		for (int i =0 ; i<100; i ++)
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	c4 36       	cpi	r28, 0x64	; 100
  ea:	d1 05       	cpc	r29, r1
  ec:	84 f3       	brlt	.-32     	; 0xce <main+0x10>
  ee:	c0 2f       	mov	r28, r16
  f0:	d1 2f       	mov	r29, r17
  f2:	ed cf       	rjmp	.-38     	; 0xce <main+0x10>

000000f4 <__divmodhi4>:
  f4:	97 fb       	bst	r25, 7
  f6:	07 2e       	mov	r0, r23
  f8:	16 f4       	brtc	.+4      	; 0xfe <__divmodhi4+0xa>
  fa:	00 94       	com	r0
  fc:	07 d0       	rcall	.+14     	; 0x10c <__divmodhi4_neg1>
  fe:	77 fd       	sbrc	r23, 7
 100:	09 d0       	rcall	.+18     	; 0x114 <__divmodhi4_neg2>
 102:	0e 94 8e 00 	call	0x11c	; 0x11c <__udivmodhi4>
 106:	07 fc       	sbrc	r0, 7
 108:	05 d0       	rcall	.+10     	; 0x114 <__divmodhi4_neg2>
 10a:	3e f4       	brtc	.+14     	; 0x11a <__divmodhi4_exit>

0000010c <__divmodhi4_neg1>:
 10c:	90 95       	com	r25
 10e:	81 95       	neg	r24
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	08 95       	ret

00000114 <__divmodhi4_neg2>:
 114:	70 95       	com	r23
 116:	61 95       	neg	r22
 118:	7f 4f       	sbci	r23, 0xFF	; 255

0000011a <__divmodhi4_exit>:
 11a:	08 95       	ret

0000011c <__udivmodhi4>:
 11c:	aa 1b       	sub	r26, r26
 11e:	bb 1b       	sub	r27, r27
 120:	51 e1       	ldi	r21, 0x11	; 17
 122:	07 c0       	rjmp	.+14     	; 0x132 <__udivmodhi4_ep>

00000124 <__udivmodhi4_loop>:
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	a6 17       	cp	r26, r22
 12a:	b7 07       	cpc	r27, r23
 12c:	10 f0       	brcs	.+4      	; 0x132 <__udivmodhi4_ep>
 12e:	a6 1b       	sub	r26, r22
 130:	b7 0b       	sbc	r27, r23

00000132 <__udivmodhi4_ep>:
 132:	88 1f       	adc	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	5a 95       	dec	r21
 138:	a9 f7       	brne	.-22     	; 0x124 <__udivmodhi4_loop>
 13a:	80 95       	com	r24
 13c:	90 95       	com	r25
 13e:	bc 01       	movw	r22, r24
 140:	cd 01       	movw	r24, r26
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
